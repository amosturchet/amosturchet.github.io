<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dotfiles on Amos Blog</title>
    <link>https://amosturchet.github.io/blog/tags/dotfiles/</link>
    <description>Recent content in Dotfiles on Amos Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 21 Aug 2025 11:58:42 +0200</lastBuildDate>
    <atom:link href="https://amosturchet.github.io/blog/tags/dotfiles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up Aerospace</title>
      <link>https://amosturchet.github.io/blog/posts/004post-aerospace/</link>
      <pubDate>Thu, 21 Aug 2025 11:58:42 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/004post-aerospace/</guid>
      <description>&lt;h2 id=&#34;window-manager-for-macos-achieving-a-clean-lightweight-setup&#34;&gt;Window Manager for macOS: Achieving a Clean, Lightweight Setup&lt;/h2&gt;&#xA;&lt;p&gt;The last missing piece in my quest for a clean and lightweight Mac setup was a tiling window manager. While macOS includes a native window manager with basic window tiling capabilities, it’s limited in customization and requires reconfiguration each session.&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-i-wanted&#34;&gt;What I Wanted&lt;/h3&gt;&#xA;&lt;p&gt;For example: I often work on LaTeX documents within a &lt;code&gt;NeoVim&lt;/code&gt; session running inside &lt;code&gt;iTerm2&lt;/code&gt; (my terminal of choice — a bit old school, but it works great for me). When I compile via &lt;code&gt;VimTex&lt;/code&gt;, the output PDF automatically opens in &lt;code&gt;Skim&lt;/code&gt;. Ideally, I wanted a fast, easy way to arrange these two windows side-by-side — with &lt;code&gt;iTerm2&lt;/code&gt; occupying about 70% of the screen, and &lt;code&gt;Skim&lt;/code&gt; taking the rest — all controlled with just a few keystrokes.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="window-manager-for-macos-achieving-a-clean-lightweight-setup">Window Manager for macOS: Achieving a Clean, Lightweight Setup</h2>
<p>The last missing piece in my quest for a clean and lightweight Mac setup was a tiling window manager. While macOS includes a native window manager with basic window tiling capabilities, it’s limited in customization and requires reconfiguration each session.</p>
<h3 id="what-i-wanted">What I Wanted</h3>
<p>For example: I often work on LaTeX documents within a <code>NeoVim</code> session running inside <code>iTerm2</code> (my terminal of choice — a bit old school, but it works great for me). When I compile via <code>VimTex</code>, the output PDF automatically opens in <code>Skim</code>. Ideally, I wanted a fast, easy way to arrange these two windows side-by-side — with <code>iTerm2</code> occupying about 70% of the screen, and <code>Skim</code> taking the rest — all controlled with just a few keystrokes.</p>
<hr>
<h3 id="why-tiling-window-managers-on-macos">Why Tiling Window Managers on macOS?</h3>
<p>Tiling Window Managers (TWM) are widely used on Linux distributions but aren’t natively supported in macOS beyond basic tiling via the green maximize button. This native feature is fine for simple use but falls short when managing dynamic workflows involving multiple windows that open and close automatically, or when fine-grained control is needed.</p>
<p>I explored popular macOS tiling managers like <a href="https://github.com/koekeishiya/yabai">Yabai</a> and <a href="https://github.com/ianyh/Amethyst">Amethyst</a>. Although Yabai is powerful, it requires disabling System Integrity Protection (SIP) for full functionality — something I preferred to avoid.</p>
<hr>
<h3 id="discovering-and-setting-up-aerospace">Discovering and Setting Up Aerospace</h3>
<p>My main source of inspiration was <a href="https://www.josean.com">Josean</a>, who recently highlighted a promising new tiling window manager: <a href="https://github.com/nikitabobko/AeroSpace">Aerospace</a>. His <a href="https://www.josean.com/posts/how-to-setup-aerospace-tiling-window-manager">detailed setup guide</a> made it easy to get started.</p>
<p>Setting up Aerospace was straightforward:</p>
<ul>
<li>I maintain a dedicated <code>dotfiles</code> directory.</li>
<li>Added the default <code>aerospace.toml</code> config from the repo.</li>
<li>Tweaked a few keybindings and settings to improve navigation.</li>
</ul>
<p>A quick tip: since I sync my dotfiles using GNU Stow (see <a href="">previous blog post</a>), the config file wasn’t recognized until after running <code>stow</code> — an important step to remember.</p>
<hr>
<h3 id="my-workspace-setup">My Workspace Setup</h3>
<p>I created four custom Aerospace workspaces to organize my daily activities:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="ln">1</span><span class="cl">B <span class="c1">#Browser</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">M <span class="c1">#Mail</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">S <span class="c1">#Sounds and Music</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">T <span class="c1">#Terminal</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">V <span class="c1">#VSCode</span></span></span></code></pre></div><p>With this setup, pressing <code>ALT + &lt;key&gt;</code> instantly switches me to a well-configured workspace and allows using Aerospace shortcuts for window resizing and positioning.</p>
<hr>
<h3 id="the-result-focused-workflow-for-latex-writing">The Result: Focused Workflow for LaTeX Writing</h3>
<p>In my <code>T</code> (Terminal) workspace — dedicated to <code>iTerm2</code> running <code>NeoVim</code> — compiling LaTeX with <code>VimTex</code> automatically opens <code>Skim</code> in the same workspace, arranged neatly side-by-side. With just a few keystrokes, such as <code>ALT + SHIFT + -</code> or <code>ALT + SHIFT + +</code>, I adjust window sizes precisely until I get the perfect layout.</p>
<p>This workflow keeps me focused and productive without distractions — mission accomplished!</p>
<hr>
<p><strong>Summary:</strong><br>
Aerospace offers a lightweight, easy to configure tiling window manager for macOS, enabling workflow automation and window management that native macOS simply can’t match for power users like me.</p>
]]></content:encoded>
    </item>
    <item>
      <title>GNU Stow and syncing dotfiles</title>
      <link>https://amosturchet.github.io/blog/posts/003post-stowdotfiles/</link>
      <pubDate>Wed, 20 Aug 2025 13:57:01 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/003post-stowdotfiles/</guid>
      <description>&lt;h2 id=&#34;dotfiles-and-organization-a-clean-setup-on-my-new-macbook&#34;&gt;Dotfiles and Organization: A Clean Setup on My New MacBook&lt;/h2&gt;&#xA;&lt;p&gt;After setting up my new MacBook with a focus on clean and minimal installations, I faced two main goals:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Organize the dotfiles in my home directory.&lt;/li&gt;&#xA;&lt;li&gt;Create a GitHub repository to sync dotfiles across multiple computers.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Here’s a concise overview of how I tackled these objectives using &lt;a href=&#34;https://www.gnu.org/software/stow/&#34;&gt;GNU Stow&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;using-gnu-stow-to-manage-dotfiles&#34;&gt;Using GNU Stow to Manage Dotfiles&lt;/h3&gt;&#xA;&lt;p&gt;I followed a great guide by &lt;a href=&#34;https://www.josean.com&#34;&gt;Josean Martinez&lt;/a&gt; titled &lt;a href=&#34;https://www.josean.com/posts/how-to-manage-dotfiles-with-gnu-stow&#34;&gt;How To Easily Manage Your Dotfiles With GNU Stow&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="dotfiles-and-organization-a-clean-setup-on-my-new-macbook">Dotfiles and Organization: A Clean Setup on My New MacBook</h2>
<p>After setting up my new MacBook with a focus on clean and minimal installations, I faced two main goals:</p>
<ol>
<li>Organize the dotfiles in my home directory.</li>
<li>Create a GitHub repository to sync dotfiles across multiple computers.</li>
</ol>
<p>Here’s a concise overview of how I tackled these objectives using <a href="https://www.gnu.org/software/stow/">GNU Stow</a>.</p>
<hr>
<h3 id="using-gnu-stow-to-manage-dotfiles">Using GNU Stow to Manage Dotfiles</h3>
<p>I followed a great guide by <a href="https://www.josean.com">Josean Martinez</a> titled <a href="https://www.josean.com/posts/how-to-manage-dotfiles-with-gnu-stow">How To Easily Manage Your Dotfiles With GNU Stow</a>.</p>
<p>GNU Stow is the key tool in this setup — easily installable via Homebrew. It works by letting you keep your dotfiles organized in a dedicated directory (usually <code>~/dotfiles/</code>) and manage symbolic links in your home directory automatically.</p>
<p>For my setup, I organized configurations for:</p>
<ul>
<li>Aspell</li>
<li>NeoVim</li>
<li>iTerm2</li>
</ul>
<p>This approach not only cleaned up my home directory but also enabled me to manage and sync my configuration files easily via GitHub.</p>
<p><em>Note:</em> I won’t cover the full setup here since Josean’s blog post and accompanying YouTube video provide an excellent, step-by-step explanation.</p>
<hr>
<h3 id="syncing-dotfiles-with-github">Syncing Dotfiles with GitHub</h3>
<p>Once the <code>~/dotfiles/</code> directory was well-structured and Stow had created the necessary symlinks, the final step was to push everything to a private GitHub repository.</p>
<p>A small hiccup was that I accidentally started the repository with a <code>master</code> branch instead of <code>main</code>. After a quick fix, I now have a clean dotfiles repo that stores all my configurations online, allowing me to push or pull changes and keep settings consistent across all my devices.</p>
<p>Here’s a snapshot of my dotfiles repo directory structure for reference:</p>





<pre tabindex="0"><code>├── .aspell.en.prepl
├── .aspell.en.pws
├── .config
│   ├── iterm2
│   │   ├── AppSupport -&gt; /Users/amos/Library/Application Support/iTerm2
│   │   └── sockets
│   │       └── secrets
│   └── nvim
│       ├── .github
│       │   ├── ISSUE_TEMPLATE
│       │   │   └── bug_report.md
│       │   ├── pull_request_template.md
│       │   └── workflows
│       │       └── stylua.yml
│       ├── .gitignore
│       ├── .stylua.toml
│       ├── doc
│       │   ├── kickstart.txt
│       │   └── tags
│       ├── init.lua
│       ├── lazy-lock.json
│       ├── lua
│       │   ├── custom
│       │   │   ├── core
│       │   │   │   ├── init.lua
│       │   │   │   ├── keymaps.lua
│       │   │   │   └── options.lua
│       │   │   └── plugins
│       │   │       ├── alpha.lua
│       │   │       ├── autopairs.lua
│       │   │       ├── bufferline.lua
│       │   │       ├── colorscheme.lua
│       │   │       ├── conform.lua
│       │   │       ├── guess-indent.lua
│       │   │       ├── indent_line.lua
│       │   │       ├── lazydev.lua
│       │   │       ├── lazygit.lua
│       │   │       ├── lspconfig.lua
│       │   │       ├── luasnip.lua
│       │   │       ├── mini.lua
│       │   │       ├── nvim-cmp.lua
│       │   │       ├── nvim-tree.lua
│       │   │       ├── telescope.lua
│       │   │       ├── todo-comments.lua
│       │   │       ├── treesitter.lua
│       │   │       ├── vimtex.lua
│       │   │       └── which-key.lua
│       │   └── kickstart
│       │       ├── health.lua
│       │       ├── info.lua
│       │       └── plugins
│       │           └── lint.lua
│       ├── LuaSnip
│       │   └── all.lua
│       ├── node_modules
│       │   ├── .bin
│       │   │   ├── node-gyp-build -&gt; ../node-gyp-build/bin.js
│       │   │   ├── node-gyp-build-optional -&gt; ../node-gyp-build/optional.js
│       │   │   ├── node-gyp-build-test -&gt; ../node-gyp-build/build-test.js
│       │   │   └── tree-sitter -&gt; ../tree-sitter-cli/cli.js
│       │   ├── .package-lock.json
│       │   └── tree-sitter-cli
│       │       ├── cli.js
│       │       ├── dsl.d.ts
│       │       ├── install.js
│       │       ├── LICENSE
│       │       ├── package.json
│       │       ├── README.md
│       │       └── tree-sitter
│       ├── package-lock.json
│       ├── package.json
│       └── README.md
├── .git
├── .zprofile
├── .zsh_sessions
│   ├── _expiration_check_timestamp
│   └── 0EC8B8A7-66B2-4DB2-82C0-804BC3207BD6.session
├── .zshrc
└── README.md</code></pre><p>Pretty neat, if you ask me!</p>
<hr>
<h3 id="bonus-managing-zcompdump-files-from-oh-my-zsh">Bonus: Managing <code>.zcompdump</code> Files from Oh My Zsh</h3>
<p>Finally, I managed to move the annoying <code>.zcompdump</code> files—created automatically by Oh My Zsh in my home folder—into a separate directory. This keeps my home clean and avoids clutter.</p>
<p>For anyone facing the same issue, here&rsquo;s a helpful <a href="https://stackoverflow.com/questions/62931101/i-have-multiple-files-of-zcompdump-why-do-i-have-multiple-files-of-these">Stack Overflow post</a> with instructions on how to do this.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
