<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Software on Amos Blog</title>
    <link>https://amosturchet.github.io/blog/tags/software/</link>
    <description>Recent content in Software on Amos Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 21 Aug 2025 11:58:42 +0200</lastBuildDate>
    <atom:link href="https://amosturchet.github.io/blog/tags/software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up Aerospace</title>
      <link>https://amosturchet.github.io/blog/posts/004post-aerospace/</link>
      <pubDate>Thu, 21 Aug 2025 11:58:42 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/004post-aerospace/</guid>
      <description>&lt;h2 id=&#34;window-manager-for-macos-achieving-a-clean-lightweight-setup&#34;&gt;Window Manager for macOS: Achieving a Clean, Lightweight Setup&lt;/h2&gt;&#xA;&lt;p&gt;The last missing piece in my quest for a clean and lightweight Mac setup was a tiling window manager. While macOS includes a native window manager with basic window tiling capabilities, it’s limited in customization and requires reconfiguration each session.&lt;/p&gt;&#xA;&lt;h3 id=&#34;what-i-wanted&#34;&gt;What I Wanted&lt;/h3&gt;&#xA;&lt;p&gt;For example: I often work on LaTeX documents within a &lt;code&gt;NeoVim&lt;/code&gt; session running inside &lt;code&gt;iTerm2&lt;/code&gt; (my terminal of choice — a bit old school, but it works great for me). When I compile via &lt;code&gt;VimTex&lt;/code&gt;, the output PDF automatically opens in &lt;code&gt;Skim&lt;/code&gt;. Ideally, I wanted a fast, easy way to arrange these two windows side-by-side — with &lt;code&gt;iTerm2&lt;/code&gt; occupying about 70% of the screen, and &lt;code&gt;Skim&lt;/code&gt; taking the rest — all controlled with just a few keystrokes.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="window-manager-for-macos-achieving-a-clean-lightweight-setup">Window Manager for macOS: Achieving a Clean, Lightweight Setup</h2>
<p>The last missing piece in my quest for a clean and lightweight Mac setup was a tiling window manager. While macOS includes a native window manager with basic window tiling capabilities, it’s limited in customization and requires reconfiguration each session.</p>
<h3 id="what-i-wanted">What I Wanted</h3>
<p>For example: I often work on LaTeX documents within a <code>NeoVim</code> session running inside <code>iTerm2</code> (my terminal of choice — a bit old school, but it works great for me). When I compile via <code>VimTex</code>, the output PDF automatically opens in <code>Skim</code>. Ideally, I wanted a fast, easy way to arrange these two windows side-by-side — with <code>iTerm2</code> occupying about 70% of the screen, and <code>Skim</code> taking the rest — all controlled with just a few keystrokes.</p>
<hr>
<h3 id="why-tiling-window-managers-on-macos">Why Tiling Window Managers on macOS?</h3>
<p>Tiling Window Managers (TWM) are widely used on Linux distributions but aren’t natively supported in macOS beyond basic tiling via the green maximize button. This native feature is fine for simple use but falls short when managing dynamic workflows involving multiple windows that open and close automatically, or when fine-grained control is needed.</p>
<p>I explored popular macOS tiling managers like <a href="https://github.com/koekeishiya/yabai">Yabai</a> and <a href="https://github.com/ianyh/Amethyst">Amethyst</a>. Although Yabai is powerful, it requires disabling System Integrity Protection (SIP) for full functionality — something I preferred to avoid.</p>
<hr>
<h3 id="discovering-and-setting-up-aerospace">Discovering and Setting Up Aerospace</h3>
<p>My main source of inspiration was <a href="https://www.josean.com">Josean</a>, who recently highlighted a promising new tiling window manager: <a href="https://github.com/nikitabobko/AeroSpace">Aerospace</a>. His <a href="https://www.josean.com/posts/how-to-setup-aerospace-tiling-window-manager">detailed setup guide</a> made it easy to get started.</p>
<p>Setting up Aerospace was straightforward:</p>
<ul>
<li>I maintain a dedicated <code>dotfiles</code> directory.</li>
<li>Added the default <code>aerospace.toml</code> config from the repo.</li>
<li>Tweaked a few keybindings and settings to improve navigation.</li>
</ul>
<p>A quick tip: since I sync my dotfiles using GNU Stow (see <a href="">previous blog post</a>), the config file wasn’t recognized until after running <code>stow</code> — an important step to remember.</p>
<hr>
<h3 id="my-workspace-setup">My Workspace Setup</h3>
<p>I created four custom Aerospace workspaces to organize my daily activities:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="ln">1</span><span class="cl">B <span class="c1">#Browser</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">M <span class="c1">#Mail</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">S <span class="c1">#Sounds and Music</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl">T <span class="c1">#Terminal</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">V <span class="c1">#VSCode</span></span></span></code></pre></div><p>With this setup, pressing <code>ALT + &lt;key&gt;</code> instantly switches me to a well-configured workspace and allows using Aerospace shortcuts for window resizing and positioning.</p>
<hr>
<h3 id="the-result-focused-workflow-for-latex-writing">The Result: Focused Workflow for LaTeX Writing</h3>
<p>In my <code>T</code> (Terminal) workspace — dedicated to <code>iTerm2</code> running <code>NeoVim</code> — compiling LaTeX with <code>VimTex</code> automatically opens <code>Skim</code> in the same workspace, arranged neatly side-by-side. With just a few keystrokes, such as <code>ALT + SHIFT + -</code> or <code>ALT + SHIFT + +</code>, I adjust window sizes precisely until I get the perfect layout.</p>
<p>This workflow keeps me focused and productive without distractions — mission accomplished!</p>
<hr>
<p><strong>Summary:</strong><br>
Aerospace offers a lightweight, easy to configure tiling window manager for macOS, enabling workflow automation and window management that native macOS simply can’t match for power users like me.</p>
]]></content:encoded>
    </item>
    <item>
      <title>GNU Stow and syncing dotfiles</title>
      <link>https://amosturchet.github.io/blog/posts/003post-stowdotfiles/</link>
      <pubDate>Wed, 20 Aug 2025 13:57:01 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/003post-stowdotfiles/</guid>
      <description>&lt;h2 id=&#34;dotfiles-and-organization-a-clean-setup-on-my-new-macbook&#34;&gt;Dotfiles and Organization: A Clean Setup on My New MacBook&lt;/h2&gt;&#xA;&lt;p&gt;After setting up my new MacBook with a focus on clean and minimal installations, I faced two main goals:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Organize the dotfiles in my home directory.&lt;/li&gt;&#xA;&lt;li&gt;Create a GitHub repository to sync dotfiles across multiple computers.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Here’s a concise overview of how I tackled these objectives using &lt;a href=&#34;https://www.gnu.org/software/stow/&#34;&gt;GNU Stow&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;using-gnu-stow-to-manage-dotfiles&#34;&gt;Using GNU Stow to Manage Dotfiles&lt;/h3&gt;&#xA;&lt;p&gt;I followed a great guide by &lt;a href=&#34;https://www.josean.com&#34;&gt;Josean Martinez&lt;/a&gt; titled &lt;a href=&#34;https://www.josean.com/posts/how-to-manage-dotfiles-with-gnu-stow&#34;&gt;How To Easily Manage Your Dotfiles With GNU Stow&lt;/a&gt;.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="dotfiles-and-organization-a-clean-setup-on-my-new-macbook">Dotfiles and Organization: A Clean Setup on My New MacBook</h2>
<p>After setting up my new MacBook with a focus on clean and minimal installations, I faced two main goals:</p>
<ol>
<li>Organize the dotfiles in my home directory.</li>
<li>Create a GitHub repository to sync dotfiles across multiple computers.</li>
</ol>
<p>Here’s a concise overview of how I tackled these objectives using <a href="https://www.gnu.org/software/stow/">GNU Stow</a>.</p>
<hr>
<h3 id="using-gnu-stow-to-manage-dotfiles">Using GNU Stow to Manage Dotfiles</h3>
<p>I followed a great guide by <a href="https://www.josean.com">Josean Martinez</a> titled <a href="https://www.josean.com/posts/how-to-manage-dotfiles-with-gnu-stow">How To Easily Manage Your Dotfiles With GNU Stow</a>.</p>
<p>GNU Stow is the key tool in this setup — easily installable via Homebrew. It works by letting you keep your dotfiles organized in a dedicated directory (usually <code>~/dotfiles/</code>) and manage symbolic links in your home directory automatically.</p>
<p>For my setup, I organized configurations for:</p>
<ul>
<li>Aspell</li>
<li>NeoVim</li>
<li>iTerm2</li>
</ul>
<p>This approach not only cleaned up my home directory but also enabled me to manage and sync my configuration files easily via GitHub.</p>
<p><em>Note:</em> I won’t cover the full setup here since Josean’s blog post and accompanying YouTube video provide an excellent, step-by-step explanation.</p>
<hr>
<h3 id="syncing-dotfiles-with-github">Syncing Dotfiles with GitHub</h3>
<p>Once the <code>~/dotfiles/</code> directory was well-structured and Stow had created the necessary symlinks, the final step was to push everything to a private GitHub repository.</p>
<p>A small hiccup was that I accidentally started the repository with a <code>master</code> branch instead of <code>main</code>. After a quick fix, I now have a clean dotfiles repo that stores all my configurations online, allowing me to push or pull changes and keep settings consistent across all my devices.</p>
<p>Here’s a snapshot of my dotfiles repo directory structure for reference:</p>





<pre tabindex="0"><code>├── .aspell.en.prepl
├── .aspell.en.pws
├── .config
│   ├── iterm2
│   │   ├── AppSupport -&gt; /Users/amos/Library/Application Support/iTerm2
│   │   └── sockets
│   │       └── secrets
│   └── nvim
│       ├── .github
│       │   ├── ISSUE_TEMPLATE
│       │   │   └── bug_report.md
│       │   ├── pull_request_template.md
│       │   └── workflows
│       │       └── stylua.yml
│       ├── .gitignore
│       ├── .stylua.toml
│       ├── doc
│       │   ├── kickstart.txt
│       │   └── tags
│       ├── init.lua
│       ├── lazy-lock.json
│       ├── lua
│       │   ├── custom
│       │   │   ├── core
│       │   │   │   ├── init.lua
│       │   │   │   ├── keymaps.lua
│       │   │   │   └── options.lua
│       │   │   └── plugins
│       │   │       ├── alpha.lua
│       │   │       ├── autopairs.lua
│       │   │       ├── bufferline.lua
│       │   │       ├── colorscheme.lua
│       │   │       ├── conform.lua
│       │   │       ├── guess-indent.lua
│       │   │       ├── indent_line.lua
│       │   │       ├── lazydev.lua
│       │   │       ├── lazygit.lua
│       │   │       ├── lspconfig.lua
│       │   │       ├── luasnip.lua
│       │   │       ├── mini.lua
│       │   │       ├── nvim-cmp.lua
│       │   │       ├── nvim-tree.lua
│       │   │       ├── telescope.lua
│       │   │       ├── todo-comments.lua
│       │   │       ├── treesitter.lua
│       │   │       ├── vimtex.lua
│       │   │       └── which-key.lua
│       │   └── kickstart
│       │       ├── health.lua
│       │       ├── info.lua
│       │       └── plugins
│       │           └── lint.lua
│       ├── LuaSnip
│       │   └── all.lua
│       ├── node_modules
│       │   ├── .bin
│       │   │   ├── node-gyp-build -&gt; ../node-gyp-build/bin.js
│       │   │   ├── node-gyp-build-optional -&gt; ../node-gyp-build/optional.js
│       │   │   ├── node-gyp-build-test -&gt; ../node-gyp-build/build-test.js
│       │   │   └── tree-sitter -&gt; ../tree-sitter-cli/cli.js
│       │   ├── .package-lock.json
│       │   └── tree-sitter-cli
│       │       ├── cli.js
│       │       ├── dsl.d.ts
│       │       ├── install.js
│       │       ├── LICENSE
│       │       ├── package.json
│       │       ├── README.md
│       │       └── tree-sitter
│       ├── package-lock.json
│       ├── package.json
│       └── README.md
├── .git
├── .zprofile
├── .zsh_sessions
│   ├── _expiration_check_timestamp
│   └── 0EC8B8A7-66B2-4DB2-82C0-804BC3207BD6.session
├── .zshrc
└── README.md</code></pre><p>Pretty neat, if you ask me!</p>
<hr>
<h3 id="bonus-managing-zcompdump-files-from-oh-my-zsh">Bonus: Managing <code>.zcompdump</code> Files from Oh My Zsh</h3>
<p>Finally, I managed to move the annoying <code>.zcompdump</code> files—created automatically by Oh My Zsh in my home folder—into a separate directory. This keeps my home clean and avoids clutter.</p>
<p>For anyone facing the same issue, here&rsquo;s a helpful <a href="https://stackoverflow.com/questions/62931101/i-have-multiple-files-of-zcompdump-why-do-i-have-multiple-files-of-these">Stack Overflow post</a> with instructions on how to do this.</p>
]]></content:encoded>
    </item>
    <item>
      <title>VimTex and LuaSnip</title>
      <link>https://amosturchet.github.io/blog/posts/002post-vimtex/</link>
      <pubDate>Tue, 19 Aug 2025 15:46:23 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/002post-vimtex/</guid>
      <description>&lt;h2 id=&#34;vimtex-latex-power-inside-neovim&#34;&gt;VimTeX: LaTeX Power Inside NeoVim&lt;/h2&gt;&#xA;&lt;p&gt;My main tool for working with LaTeX in NeoVim is &lt;strong&gt;VimTeX&lt;/strong&gt; — a powerful plugin that brings the full functionality you might expect from an IDE like VSCode, but fully integrated in the NeoVim ecosystem.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-vimtex&#34;&gt;Why VimTeX?&lt;/h3&gt;&#xA;&lt;p&gt;With VimTeX, you get many essential features to make LaTeX editing smooth and efficient:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Continuous compilation of LaTeX source &lt;em&gt;as you type&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;Debug LaTeX compilation directly &lt;strong&gt;inside&lt;/strong&gt; NeoVim&lt;/li&gt;&#xA;&lt;li&gt;Forward and backward search between &lt;code&gt;.tex&lt;/code&gt; source and compiled &lt;code&gt;.pdf&lt;/code&gt; (on macOS, works best with &lt;a href=&#34;https://skim-app.sourceforge.io&#34;&gt;Skim&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Autocompletion powered by the TreeSitter NeoVim plugin&lt;/li&gt;&#xA;&lt;li&gt;Seamless snippet management through LuaSnip integration (more about this below)&lt;/li&gt;&#xA;&lt;li&gt;Quick and effective &lt;code&gt;.bibtex&lt;/code&gt; integration for bibliography management&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In short: everything you&amp;rsquo;d expect from a full-fledged LaTeX IDE is achievable &lt;em&gt;within&lt;/em&gt; NeoVim using VimTeX.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="vimtex-latex-power-inside-neovim">VimTeX: LaTeX Power Inside NeoVim</h2>
<p>My main tool for working with LaTeX in NeoVim is <strong>VimTeX</strong> — a powerful plugin that brings the full functionality you might expect from an IDE like VSCode, but fully integrated in the NeoVim ecosystem.</p>
<h3 id="why-vimtex">Why VimTeX?</h3>
<p>With VimTeX, you get many essential features to make LaTeX editing smooth and efficient:</p>
<ul>
<li>Continuous compilation of LaTeX source <em>as you type</em></li>
<li>Debug LaTeX compilation directly <strong>inside</strong> NeoVim</li>
<li>Forward and backward search between <code>.tex</code> source and compiled <code>.pdf</code> (on macOS, works best with <a href="https://skim-app.sourceforge.io">Skim</a>)</li>
<li>Autocompletion powered by the TreeSitter NeoVim plugin</li>
<li>Seamless snippet management through LuaSnip integration (more about this below)</li>
<li>Quick and effective <code>.bibtex</code> integration for bibliography management</li>
</ul>
<p>In short: everything you&rsquo;d expect from a full-fledged LaTeX IDE is achievable <em>within</em> NeoVim using VimTeX.</p>
<hr>
<h3 id="setting-up-vimtex">Setting Up VimTeX</h3>
<p>Installation is straightforward once you translate Vimscript configs to Lua (the preferred setup for NeoVim now). Here is my <code>vimtex.lua</code> plugin config file that I pieced together:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="s1">&#39;lervag/vimtex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">lazy</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">-- lazy-loading will disable inverse search</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">vimtex_view_method</span> <span class="o">=</span> <span class="s1">&#39;skim&#39;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">vimtex_compiler_latexmk</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">      <span class="n">aux_dir</span> <span class="o">=</span> <span class="s1">&#39;./.latexmk/aux&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">      <span class="n">out_dir</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="c1">-- only open quickfix when there are *errors*</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">vimtex_quickfix_open_on_warning</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">Tex_DefaultTargetFormat</span> <span class="o">=</span> <span class="s1">&#39;pdf&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">Tex_CompileRule_pdf</span> <span class="o">=</span> <span class="s1">&#39;pdflatex&#39;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="n">keys</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">{</span> <span class="s1">&#39;&lt;localLeader&gt;l&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;+vimtex&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">{</span> <span class="s1">&#39;&lt;localLeader&gt;lb&#39;</span><span class="p">,</span> <span class="s1">&#39;:!pdflatex %:p&#39;</span><span class="p">,</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;compile pdf&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Additionally, in my <code>init.lua</code>, I configure NeoVim to treat LaTeX files with specific options and enable LuaSnip:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">-- latex is special</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_create_autocmd</span><span class="p">({</span> <span class="s1">&#39;FileType&#39;</span> <span class="p">},</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">pattern</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;bib&#39;</span><span class="p">,</span> <span class="s1">&#39;tex&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">callback</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">vim.opt_local</span><span class="p">.</span><span class="n">conceallevel</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">vim.opt_local</span><span class="p">.</span><span class="n">wrap</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">vim.bo</span><span class="p">.</span><span class="n">shiftwidth</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">vim.bo</span><span class="p">.</span><span class="n">tabstop</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1">--</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1">-- Load snippets from ~/.config/nvim/LuaSnip/</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.loaders.from_lua&#39;</span><span class="p">).</span><span class="n">load</span> <span class="p">{</span> <span class="n">paths</span> <span class="o">=</span> <span class="s1">&#39;~/.config/nvim/LuaSnip/&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip&#39;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span> <span class="n">enable_autosnippets</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span></span></span></code></pre></div><p>This setup makes LaTeX editing in NeoVim as fast and intuitive as a modern IDE!</p>
<hr>
<h2 id="luasnip-snippets-made-easy">LuaSnip: Snippets Made Easy</h2>
<p>A killer feature of VimTeX is its deep integration with the snippets plugin <a href="https://github.com/L3MON4D3/LuaSnip">LuaSnip</a>, enabling you to create, edit, and use snippets seamlessly for LaTeX — and any other language you might want to write in (HTML, CSS, Markdown, etc.).</p>
<p>Installing LuaSnip is even simpler than VimTeX. Here’s my working <code>luasnip.lua</code> config after resolving some conflicts:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="s1">&#39;L3MON4D3/LuaSnip&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;v2.*&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">build</span> <span class="o">=</span> <span class="s1">&#39;make install_jsregexp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">event</span> <span class="o">=</span> <span class="s1">&#39;InsertEnter&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.loaders.from_lua&#39;</span><span class="p">).</span><span class="n">load</span> <span class="p">{</span> <span class="n">paths</span> <span class="o">=</span> <span class="s1">&#39;~/config/nvim/LuaSnip/&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="kd">local</span> <span class="n">ls</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;luasnip&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">ls.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">      <span class="n">update_events</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;TextChanged&#39;</span><span class="p">,</span> <span class="s1">&#39;TextChangedI&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">      <span class="n">enable_autosnippets</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">      <span class="n">store_selection_keys</span> <span class="o">=</span> <span class="s1">&#39;&lt;Tab&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="c1">-- LuaSnip Keymaps</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="c1">--</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="c1">-- Expand snippets in insert mode with Tab</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="c1">-- Jump forward in through tabstops in insert and visual mode with Control-f</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="c1">--local ls = require &#39;luasnip&#39;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="c1">--</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;Tab&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">      <span class="n">ls.expand</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;C-L&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">      <span class="n">ls.jump</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;C-J&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">      <span class="n">ls.jump</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;C-E&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">      <span class="kr">if</span> <span class="n">ls.choice_active</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">        <span class="n">ls.change_choice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">      <span class="kr">end</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;select autocomplete&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Here my keymap to expand the snippet is set to <code>Tab</code> and I can cycle to the various snippets with the keymaps above.</p>
<h3 id="how-luasnip-works-in-practice">How LuaSnip Works in Practice</h3>
<p>When you start typing, for example, <code>&quot;se&quot;</code> in a LaTeX file, LuaSnip will suggest the snippet for <code>\section{}</code>, and pressing <code>&lt;Tab&gt;</code> expands it to: <code>\section{&lt;cursor here&gt;}</code></p>
<p>allowing you to immediately type the section title — a huge time saver!</p>
<p>VimTeX itself also adds native shortcuts to speed up LaTeX workflows. For instance, the command <code>cse</code> lets you <strong>Change Surrounding Environment</strong>. Say you start writing an <code>equation</code> but want to switch to <code>align*</code> — just type <code>cse align*</code> and VimTeX transforms the environment quickly and elegantly, making editing feel fluid and natural.</p>
<hr>
<h3 id="writing-custom-snippets-with-luasnip">Writing Custom Snippets with LuaSnip</h3>
<p>You can define your own snippets loaded automatically with NeoVim. Here’s the header of my snippet file for LaTeX, giving you handy abbreviations:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">--- Abbreviations used in this article and the LuaSnip docs</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="kd">local</span> <span class="n">ls</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;luasnip&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ls.snippet</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">local</span> <span class="n">sn</span> <span class="o">=</span> <span class="n">ls.snippet_node</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="n">ls.text_node</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ls.insert_node</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="kd">local</span> <span class="n">f</span> <span class="o">=</span> <span class="n">ls.function_node</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="kd">local</span> <span class="n">d</span> <span class="o">=</span> <span class="n">ls.dynamic_node</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kd">local</span> <span class="n">fmt</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.extras.fmt&#39;</span><span class="p">).</span><span class="n">fmt</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="kd">local</span> <span class="n">fmta</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.extras.fmt&#39;</span><span class="p">).</span><span class="n">fmta</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="kd">local</span> <span class="n">rep</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.extras&#39;</span><span class="p">).</span><span class="n">rep</span></span></span></code></pre></div><p>From here, defining snippets for common LaTeX commands or environments is straightforward and super productive.</p>
<hr>
<h3 id="further-resources">Further Resources</h3>
<p>If you want to dive deeper, I highly recommend the fantastic tutorial <strong><a href="https://ejmastnak.com/tutorials/vim-latex/intro/">A guide to supercharged mathematical typesetting</a></strong> by <a href="https://ejmastnak.com">ejmastnak</a>. Although it&rsquo;s written for Vimscript, it covers all the fundamentals and advanced tips for effective LaTeX editing in Vim/NeoVim.</p>
<hr>
<p>With VimTeX + LuaSnip, your NeoVim becomes a powerhouse LaTeX IDE — lightweight, fast, and extremely customizable.</p>
]]></content:encoded>
    </item>
    <item>
      <title>NeoVim Installation</title>
      <link>https://amosturchet.github.io/blog/posts/001post-nvim/</link>
      <pubDate>Mon, 11 Aug 2025 11:03:34 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/001post-nvim/</guid>
      <description>&lt;h2 id=&#34;neovim&#34;&gt;NeoVim&lt;/h2&gt;&#xA;&lt;p&gt;After some consideration, I decided to install &lt;a href=&#34;http://neovim.io&#34;&gt;NeoVim&lt;/a&gt; on my new MacBook Pro. Having used it sporadically at home and work before, I wanted to give it another shot. This post shares my experience installing NeoVim and creating a minimal configuration tailored to my needs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;my-previous-attempt&#34;&gt;My Previous Attempt&lt;/h3&gt;&#xA;&lt;p&gt;The last time I installed NeoVim, I followed an excellent &lt;a href=&#34;https://www.josean.com/posts/how-to-setup-neovim-2024&#34;&gt;blog post by Josean Martinez&lt;/a&gt;. Alongside the blog and a YouTube video, I managed to replicate the setup on my MacMini. However, I didn’t fully understand parts of the configuration, especially some plugins—this was mostly my lack of knowledge rather than unclear instructions.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="neovim">NeoVim</h2>
<p>After some consideration, I decided to install <a href="http://neovim.io">NeoVim</a> on my new MacBook Pro. Having used it sporadically at home and work before, I wanted to give it another shot. This post shares my experience installing NeoVim and creating a minimal configuration tailored to my needs.</p>
<h3 id="my-previous-attempt">My Previous Attempt</h3>
<p>The last time I installed NeoVim, I followed an excellent <a href="https://www.josean.com/posts/how-to-setup-neovim-2024">blog post by Josean Martinez</a>. Alongside the blog and a YouTube video, I managed to replicate the setup on my MacMini. However, I didn’t fully understand parts of the configuration, especially some plugins—this was mostly my lack of knowledge rather than unclear instructions.</p>
<p>The main issue was ending up with a fully working config I barely understood. I realized this painfully when trying to set up <a href="https://github.com/lervag/vimtex/">VimTex</a>, a plugin for working with LaTeX. Since I’m not a developer or programmer, my primary use of NeoVim is to write and edit text files, HTML, CSS, and mostly LaTeX documents. My goal was a working setup to create and edit .tex files with all the power of NeoVim, including snippets.</p>
<p>I still use VSCode alongside NeoVim. Although integrating Vim with VSCode can be frustrating, VSCode meets most of my needs. When I finally got <em>VimTex</em> working in NeoVim, I saw its great potential to speed up my workflow and leverage superior snippet functionality (which doesn’t work well for me on VSCode with Vim emulation). However, I burned out on configuration and didn’t replicate these settings at work, so I ended up with a working NeoVim setup I rarely used at home and mainly reverted to VSCode.</p>
<h3 id="a-new-mac-a-new-try">A New Mac, a New Try</h3>
<p>A couple of months ago, I got a new laptop and adopted a minimalist philosophy: keep things clean and lean. I installed software mostly via <em>Homebrew</em> and limited Microsoft apps (still have to use Teams for university). I also restrained myself from installing too many new apps unless compelling.</p>
<p>So the question was: Should I install NeoVim again and try to get VimTex working?</p>
<p>With some weeks off work, I decided to give it a proper try—but I took a different approach this time.</p>
<ul>
<li>Starting point: <a href="https://youtu.be/m8C0Cq9Uv9o?si=0LRfo-6rwe8wca-D">TJ DeVries’ <em>The Only Video You Need to Get Started with Neovim</em></a><br>
<a href="http://www.youtube.com/watch?v=m8C0Cq9Uv9o" title="The Only Video You Need to Get Started with Neovim"><img src="http://img.youtube.com/vi/m8C0Cq9Uv9o/0.jpg" alt="TJ DeVries’s Video"></a></li>
</ul>
<p>Following TJ DeVries&rsquo; excellent video, I used <a href="https://github.com/nvim-lua/kickstart.nvim">Kickstart</a> as a base instead of starting from scratch. The documentation was fantastic; reading through the <code>init.lua</code> file with its clear comments helped me understand rather than blindly copy configurations.</p>
<p>I tweaked the setup and reorganized plugins to minimize code I understood little or nothing about. This is my final file structure:</p>





<pre tabindex="0"><code>.
├── doc
│   ├── kickstart.txt
│   └── tags
├── init.lua
├── lazy-lock.json
├── lua
│   ├── custom
│   │   ├── core
│   │   │   ├── init.lua
│   │   │   ├── keymaps.lua
│   │   │   └── options.lua
│   │   └── plugins
│   │       ├── alpha.lua
│   │       ├── autopairs.lua
│   │       ├── blink.lua
│   │       ├── bufferline.lua
│   │       ├── colorscheme.lua
│   │       ├── conform.lua
│   │       ├── guess-indent.lua
│   │       ├── indent_line.lua
│   │       ├── lazydev.lua
│   │       ├── lspconfig.lua
│   │       ├── mini.lua
│   │       ├── nvim-tree.lua
│   │       ├── telescope.lua
│   │       ├── todo-comments.lua
│   │       ├── treesitter.lua
│   │       ├── vimtex.lua
│   │       └── which-key.lua
│   └── kickstart
│       ├── health.lua
│       └── plugins
│           ├── debug.lua
│           ├── gitsigns.lua
│           ├── lint.lua
│           └── neo-tree.lua
├── node_modules
│   └── tree-sitter-cli
│       ├── cli.js
│       ├── dsl.d.ts
│       ├── install.js
│       ├── LICENSE
│       ├── package.json
│       ├── README.md
│       └── tree-sitter
├── package-lock.json
├── package.json
└── README.md</code></pre><p>I kept the Kickstart files separate from my custom folder. Most plugins were initially called inside <code>init.lua</code>, but I created individual <code>.lua</code> files for each plugin I somewhat understood. The result is a reasonable, working configuration.</p>
<h3 id="vimtex-setup">VimTex Setup</h3>
<p>The last piece was installing <em>VimTex</em>. The original <a href="https://ejmastnak.com/tutorials/vim-latex/intro/">EJmastnack tutorial</a> is very helpful, but it targets VimScript, and since my config is in Lua, some adaptation was necessary.</p>
<h4 id="a-small-hiccup">A Small Hiccup</h4>
<p>I ran into a hiccup using <code>Treesitter</code> for LaTeX syntax highlighting. Apparently, <code>tree-sitter-cli</code> must be installed manually via <code>npm</code> to build LaTeX support (oddly, this step isn’t required for BibTeX). If I need to do this again, the command that solved it was:</p>





<pre tabindex="0"><code>npm install -g tree-sitter-cli</code></pre>]]></content:encoded>
    </item>
  </channel>
</rss>
