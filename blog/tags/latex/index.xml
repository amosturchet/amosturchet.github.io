<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LaTeX on Amos Blog</title>
    <link>https://amosturchet.github.io/blog/tags/latex/</link>
    <description>Recent content in LaTeX on Amos Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 19 Aug 2025 15:46:23 +0200</lastBuildDate>
    <atom:link href="https://amosturchet.github.io/blog/tags/latex/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VimTex and LuaSnip</title>
      <link>https://amosturchet.github.io/blog/posts/002post-vimtex/</link>
      <pubDate>Tue, 19 Aug 2025 15:46:23 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/002post-vimtex/</guid>
      <description>&lt;h2 id=&#34;vimtex-latex-power-inside-neovim&#34;&gt;VimTeX: LaTeX Power Inside NeoVim&lt;/h2&gt;&#xA;&lt;p&gt;My main tool for working with LaTeX in NeoVim is &lt;strong&gt;VimTeX&lt;/strong&gt; — a powerful plugin that brings the full functionality you might expect from an IDE like VSCode, but fully integrated in the NeoVim ecosystem.&lt;/p&gt;&#xA;&lt;h3 id=&#34;why-vimtex&#34;&gt;Why VimTeX?&lt;/h3&gt;&#xA;&lt;p&gt;With VimTeX, you get many essential features to make LaTeX editing smooth and efficient:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Continuous compilation of LaTeX source &lt;em&gt;as you type&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;Debug LaTeX compilation directly &lt;strong&gt;inside&lt;/strong&gt; NeoVim&lt;/li&gt;&#xA;&lt;li&gt;Forward and backward search between &lt;code&gt;.tex&lt;/code&gt; source and compiled &lt;code&gt;.pdf&lt;/code&gt; (on macOS, works best with &lt;a href=&#34;https://skim-app.sourceforge.io&#34;&gt;Skim&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Autocompletion powered by the TreeSitter NeoVim plugin&lt;/li&gt;&#xA;&lt;li&gt;Seamless snippet management through LuaSnip integration (more about this below)&lt;/li&gt;&#xA;&lt;li&gt;Quick and effective &lt;code&gt;.bibtex&lt;/code&gt; integration for bibliography management&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In short: everything you&amp;rsquo;d expect from a full-fledged LaTeX IDE is achievable &lt;em&gt;within&lt;/em&gt; NeoVim using VimTeX.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="vimtex-latex-power-inside-neovim">VimTeX: LaTeX Power Inside NeoVim</h2>
<p>My main tool for working with LaTeX in NeoVim is <strong>VimTeX</strong> — a powerful plugin that brings the full functionality you might expect from an IDE like VSCode, but fully integrated in the NeoVim ecosystem.</p>
<h3 id="why-vimtex">Why VimTeX?</h3>
<p>With VimTeX, you get many essential features to make LaTeX editing smooth and efficient:</p>
<ul>
<li>Continuous compilation of LaTeX source <em>as you type</em></li>
<li>Debug LaTeX compilation directly <strong>inside</strong> NeoVim</li>
<li>Forward and backward search between <code>.tex</code> source and compiled <code>.pdf</code> (on macOS, works best with <a href="https://skim-app.sourceforge.io">Skim</a>)</li>
<li>Autocompletion powered by the TreeSitter NeoVim plugin</li>
<li>Seamless snippet management through LuaSnip integration (more about this below)</li>
<li>Quick and effective <code>.bibtex</code> integration for bibliography management</li>
</ul>
<p>In short: everything you&rsquo;d expect from a full-fledged LaTeX IDE is achievable <em>within</em> NeoVim using VimTeX.</p>
<hr>
<h3 id="setting-up-vimtex">Setting Up VimTeX</h3>
<p>Installation is straightforward once you translate Vimscript configs to Lua (the preferred setup for NeoVim now). Here is my <code>vimtex.lua</code> plugin config file that I pieced together:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="s1">&#39;lervag/vimtex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">lazy</span> <span class="o">=</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">-- lazy-loading will disable inverse search</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">vimtex_view_method</span> <span class="o">=</span> <span class="s1">&#39;skim&#39;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">vimtex_compiler_latexmk</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">      <span class="n">aux_dir</span> <span class="o">=</span> <span class="s1">&#39;./.latexmk/aux&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">      <span class="n">out_dir</span> <span class="o">=</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="c1">-- only open quickfix when there are *errors*</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">vimtex_quickfix_open_on_warning</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">Tex_DefaultTargetFormat</span> <span class="o">=</span> <span class="s1">&#39;pdf&#39;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="n">vim.g</span><span class="p">.</span><span class="n">Tex_CompileRule_pdf</span> <span class="o">=</span> <span class="s1">&#39;pdflatex&#39;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">  <span class="n">keys</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">{</span> <span class="s1">&#39;&lt;localLeader&gt;l&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;+vimtex&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">{</span> <span class="s1">&#39;&lt;localLeader&gt;lb&#39;</span><span class="p">,</span> <span class="s1">&#39;:!pdflatex %:p&#39;</span><span class="p">,</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;compile pdf&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">  <span class="p">},</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Additionally, in my <code>init.lua</code>, I configure NeoVim to treat LaTeX files with specific options and enable LuaSnip:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">-- latex is special</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="n">vim.api</span><span class="p">.</span><span class="n">nvim_create_autocmd</span><span class="p">({</span> <span class="s1">&#39;FileType&#39;</span> <span class="p">},</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">pattern</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;bib&#39;</span><span class="p">,</span> <span class="s1">&#39;tex&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">callback</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="n">vim.opt_local</span><span class="p">.</span><span class="n">conceallevel</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="n">vim.opt_local</span><span class="p">.</span><span class="n">wrap</span> <span class="o">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">vim.bo</span><span class="p">.</span><span class="n">shiftwidth</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="n">vim.bo</span><span class="p">.</span><span class="n">tabstop</span> <span class="o">=</span> <span class="mi">2</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1">--</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="c1">-- Load snippets from ~/.config/nvim/LuaSnip/</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.loaders.from_lua&#39;</span><span class="p">).</span><span class="n">load</span> <span class="p">{</span> <span class="n">paths</span> <span class="o">=</span> <span class="s1">&#39;~/.config/nvim/LuaSnip/&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip&#39;</span><span class="p">).</span><span class="n">setup</span> <span class="p">{</span> <span class="n">enable_autosnippets</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">}</span></span></span></code></pre></div><p>This setup makes LaTeX editing in NeoVim as fast and intuitive as a modern IDE!</p>
<hr>
<h2 id="luasnip-snippets-made-easy">LuaSnip: Snippets Made Easy</h2>
<p>A killer feature of VimTeX is its deep integration with the snippets plugin <a href="https://github.com/L3MON4D3/LuaSnip">LuaSnip</a>, enabling you to create, edit, and use snippets seamlessly for LaTeX — and any other language you might want to write in (HTML, CSS, Markdown, etc.).</p>
<p>Installing LuaSnip is even simpler than VimTeX. Here’s my working <code>luasnip.lua</code> config after resolving some conflicts:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kr">return</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">  <span class="s1">&#39;L3MON4D3/LuaSnip&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">  <span class="n">version</span> <span class="o">=</span> <span class="s1">&#39;v2.*&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">  <span class="n">build</span> <span class="o">=</span> <span class="s1">&#39;make install_jsregexp&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">  <span class="n">event</span> <span class="o">=</span> <span class="s1">&#39;InsertEnter&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">  <span class="n">config</span> <span class="o">=</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.loaders.from_lua&#39;</span><span class="p">).</span><span class="n">load</span> <span class="p">{</span> <span class="n">paths</span> <span class="o">=</span> <span class="s1">&#39;~/config/nvim/LuaSnip/&#39;</span> <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="kd">local</span> <span class="n">ls</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;luasnip&#39;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="n">ls.setup</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">      <span class="n">update_events</span> <span class="o">=</span> <span class="p">{</span> <span class="s1">&#39;TextChanged&#39;</span><span class="p">,</span> <span class="s1">&#39;TextChangedI&#39;</span> <span class="p">},</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">      <span class="n">enable_autosnippets</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">      <span class="n">store_selection_keys</span> <span class="o">=</span> <span class="s1">&#39;&lt;Tab&gt;&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="c1">-- LuaSnip Keymaps</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="c1">--</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="c1">-- Expand snippets in insert mode with Tab</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="c1">-- Jump forward in through tabstops in insert and visual mode with Control-f</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="c1">--local ls = require &#39;luasnip&#39;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="c1">--</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;Tab&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">      <span class="n">ls.expand</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;C-L&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">      <span class="n">ls.jump</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;C-J&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">      <span class="n">ls.jump</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="n">vim.keymap</span><span class="p">.</span><span class="n">set</span><span class="p">({</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="s1">&#39;s&#39;</span> <span class="p">},</span> <span class="s1">&#39;&lt;C-E&gt;&#39;</span><span class="p">,</span> <span class="kr">function</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">      <span class="kr">if</span> <span class="n">ls.choice_active</span><span class="p">()</span> <span class="kr">then</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">        <span class="n">ls.change_choice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">      <span class="kr">end</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="kr">end</span><span class="p">,</span> <span class="p">{</span> <span class="n">silent</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span> <span class="n">desc</span> <span class="o">=</span> <span class="s1">&#39;select autocomplete&#39;</span> <span class="p">})</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">  <span class="kr">end</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><p>Here my keymap to expand the snippet is set to <code>Tab</code> and I can cycle to the various snippets with the keymaps above.</p>
<h3 id="how-luasnip-works-in-practice">How LuaSnip Works in Practice</h3>
<p>When you start typing, for example, <code>&quot;se&quot;</code> in a LaTeX file, LuaSnip will suggest the snippet for <code>\section{}</code>, and pressing <code>&lt;Tab&gt;</code> expands it to: <code>\section{&lt;cursor here&gt;}</code></p>
<p>allowing you to immediately type the section title — a huge time saver!</p>
<p>VimTeX itself also adds native shortcuts to speed up LaTeX workflows. For instance, the command <code>cse</code> lets you <strong>Change Surrounding Environment</strong>. Say you start writing an <code>equation</code> but want to switch to <code>align*</code> — just type <code>cse align*</code> and VimTeX transforms the environment quickly and elegantly, making editing feel fluid and natural.</p>
<hr>
<h3 id="writing-custom-snippets-with-luasnip">Writing Custom Snippets with LuaSnip</h3>
<p>You can define your own snippets loaded automatically with NeoVim. Here’s the header of my snippet file for LaTeX, giving you handy abbreviations:</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">--- Abbreviations used in this article and the LuaSnip docs</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="kd">local</span> <span class="n">ls</span> <span class="o">=</span> <span class="n">require</span> <span class="s1">&#39;luasnip&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl"><span class="kd">local</span> <span class="n">s</span> <span class="o">=</span> <span class="n">ls.snippet</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">local</span> <span class="n">sn</span> <span class="o">=</span> <span class="n">ls.snippet_node</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="n">ls.text_node</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="kd">local</span> <span class="n">i</span> <span class="o">=</span> <span class="n">ls.insert_node</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="kd">local</span> <span class="n">f</span> <span class="o">=</span> <span class="n">ls.function_node</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="kd">local</span> <span class="n">d</span> <span class="o">=</span> <span class="n">ls.dynamic_node</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="kd">local</span> <span class="n">fmt</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.extras.fmt&#39;</span><span class="p">).</span><span class="n">fmt</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="kd">local</span> <span class="n">fmta</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.extras.fmt&#39;</span><span class="p">).</span><span class="n">fmta</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="kd">local</span> <span class="n">rep</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;luasnip.extras&#39;</span><span class="p">).</span><span class="n">rep</span></span></span></code></pre></div><p>From here, defining snippets for common LaTeX commands or environments is straightforward and super productive.</p>
<hr>
<h3 id="further-resources">Further Resources</h3>
<p>If you want to dive deeper, I highly recommend the fantastic tutorial <strong><a href="https://ejmastnak.com/tutorials/vim-latex/intro/">A guide to supercharged mathematical typesetting</a></strong> by <a href="https://ejmastnak.com">ejmastnak</a>. Although it&rsquo;s written for Vimscript, it covers all the fundamentals and advanced tips for effective LaTeX editing in Vim/NeoVim.</p>
<hr>
<p>With VimTeX + LuaSnip, your NeoVim becomes a powerhouse LaTeX IDE — lightweight, fast, and extremely customizable.</p>
]]></content:encoded>
    </item>
    <item>
      <title>NeoVim Installation</title>
      <link>https://amosturchet.github.io/blog/posts/001post-nvim/</link>
      <pubDate>Mon, 11 Aug 2025 11:03:34 +0200</pubDate>
      <guid>https://amosturchet.github.io/blog/posts/001post-nvim/</guid>
      <description>&lt;h2 id=&#34;neovim&#34;&gt;NeoVim&lt;/h2&gt;&#xA;&lt;p&gt;After some consideration, I decided to install &lt;a href=&#34;http://neovim.io&#34;&gt;NeoVim&lt;/a&gt; on my new MacBook Pro. Having used it sporadically at home and work before, I wanted to give it another shot. This post shares my experience installing NeoVim and creating a minimal configuration tailored to my needs.&lt;/p&gt;&#xA;&lt;h3 id=&#34;my-previous-attempt&#34;&gt;My Previous Attempt&lt;/h3&gt;&#xA;&lt;p&gt;The last time I installed NeoVim, I followed an excellent &lt;a href=&#34;https://www.josean.com/posts/how-to-setup-neovim-2024&#34;&gt;blog post by Josean Martinez&lt;/a&gt;. Alongside the blog and a YouTube video, I managed to replicate the setup on my MacMini. However, I didn’t fully understand parts of the configuration, especially some plugins—this was mostly my lack of knowledge rather than unclear instructions.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="neovim">NeoVim</h2>
<p>After some consideration, I decided to install <a href="http://neovim.io">NeoVim</a> on my new MacBook Pro. Having used it sporadically at home and work before, I wanted to give it another shot. This post shares my experience installing NeoVim and creating a minimal configuration tailored to my needs.</p>
<h3 id="my-previous-attempt">My Previous Attempt</h3>
<p>The last time I installed NeoVim, I followed an excellent <a href="https://www.josean.com/posts/how-to-setup-neovim-2024">blog post by Josean Martinez</a>. Alongside the blog and a YouTube video, I managed to replicate the setup on my MacMini. However, I didn’t fully understand parts of the configuration, especially some plugins—this was mostly my lack of knowledge rather than unclear instructions.</p>
<p>The main issue was ending up with a fully working config I barely understood. I realized this painfully when trying to set up <a href="https://github.com/lervag/vimtex/">VimTex</a>, a plugin for working with LaTeX. Since I’m not a developer or programmer, my primary use of NeoVim is to write and edit text files, HTML, CSS, and mostly LaTeX documents. My goal was a working setup to create and edit .tex files with all the power of NeoVim, including snippets.</p>
<p>I still use VSCode alongside NeoVim. Although integrating Vim with VSCode can be frustrating, VSCode meets most of my needs. When I finally got <em>VimTex</em> working in NeoVim, I saw its great potential to speed up my workflow and leverage superior snippet functionality (which doesn’t work well for me on VSCode with Vim emulation). However, I burned out on configuration and didn’t replicate these settings at work, so I ended up with a working NeoVim setup I rarely used at home and mainly reverted to VSCode.</p>
<h3 id="a-new-mac-a-new-try">A New Mac, a New Try</h3>
<p>A couple of months ago, I got a new laptop and adopted a minimalist philosophy: keep things clean and lean. I installed software mostly via <em>Homebrew</em> and limited Microsoft apps (still have to use Teams for university). I also restrained myself from installing too many new apps unless compelling.</p>
<p>So the question was: Should I install NeoVim again and try to get VimTex working?</p>
<p>With some weeks off work, I decided to give it a proper try—but I took a different approach this time.</p>
<ul>
<li>Starting point: <a href="https://youtu.be/m8C0Cq9Uv9o?si=0LRfo-6rwe8wca-D">TJ DeVries’ <em>The Only Video You Need to Get Started with Neovim</em></a><br>
<a href="http://www.youtube.com/watch?v=m8C0Cq9Uv9o" title="The Only Video You Need to Get Started with Neovim"><img alt="TJ DeVries&rsquo;s Video" src="http://img.youtube.com/vi/m8C0Cq9Uv9o/0.jpg"></a></li>
</ul>
<p>Following TJ DeVries&rsquo; excellent video, I used <a href="https://github.com/nvim-lua/kickstart.nvim">Kickstart</a> as a base instead of starting from scratch. The documentation was fantastic; reading through the <code>init.lua</code> file with its clear comments helped me understand rather than blindly copy configurations.</p>
<p>I tweaked the setup and reorganized plugins to minimize code I understood little or nothing about. This is my final file structure:</p>





<pre tabindex="0"><code>.
├── doc
│   ├── kickstart.txt
│   └── tags
├── init.lua
├── lazy-lock.json
├── lua
│   ├── custom
│   │   ├── core
│   │   │   ├── init.lua
│   │   │   ├── keymaps.lua
│   │   │   └── options.lua
│   │   └── plugins
│   │       ├── alpha.lua
│   │       ├── autopairs.lua
│   │       ├── blink.lua
│   │       ├── bufferline.lua
│   │       ├── colorscheme.lua
│   │       ├── conform.lua
│   │       ├── guess-indent.lua
│   │       ├── indent_line.lua
│   │       ├── lazydev.lua
│   │       ├── lspconfig.lua
│   │       ├── mini.lua
│   │       ├── nvim-tree.lua
│   │       ├── telescope.lua
│   │       ├── todo-comments.lua
│   │       ├── treesitter.lua
│   │       ├── vimtex.lua
│   │       └── which-key.lua
│   └── kickstart
│       ├── health.lua
│       └── plugins
│           ├── debug.lua
│           ├── gitsigns.lua
│           ├── lint.lua
│           └── neo-tree.lua
├── node_modules
│   └── tree-sitter-cli
│       ├── cli.js
│       ├── dsl.d.ts
│       ├── install.js
│       ├── LICENSE
│       ├── package.json
│       ├── README.md
│       └── tree-sitter
├── package-lock.json
├── package.json
└── README.md</code></pre><p>I kept the Kickstart files separate from my custom folder. Most plugins were initially called inside <code>init.lua</code>, but I created individual <code>.lua</code> files for each plugin I somewhat understood. The result is a reasonable, working configuration.</p>
<h3 id="vimtex-setup">VimTex Setup</h3>
<p>The last piece was installing <em>VimTex</em>. The original <a href="https://ejmastnak.com/tutorials/vim-latex/intro/">EJmastnack tutorial</a> is very helpful, but it targets VimScript, and since my config is in Lua, some adaptation was necessary.</p>
<h4 id="a-small-hiccup">A Small Hiccup</h4>
<p>I ran into a hiccup using <code>Treesitter</code> for LaTeX syntax highlighting. Apparently, <code>tree-sitter-cli</code> must be installed manually via <code>npm</code> to build LaTeX support (oddly, this step isn’t required for BibTeX). If I need to do this again, the command that solved it was:</p>





<pre tabindex="0"><code>npm install -g tree-sitter-cli</code></pre>]]></content:encoded>
    </item>
  </channel>
</rss>
