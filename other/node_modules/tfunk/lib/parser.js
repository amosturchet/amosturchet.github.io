// Do not edit the parser directly. This is a generated file created using a build script and the PEG grammar.
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = [],
        peg$c1 = { type: "other", description: "buffer" },
        peg$c2 = peg$FAILED,
        peg$c3 = function(e, w) { return {"buffer": e + w.join('')} },
        peg$c4 = void 0,
        peg$c5 = function(c) { return c },
        peg$c6 = function(b) { return {"buffer": b.join('')} },
        peg$c7 = ":",
        peg$c8 = { type: "literal", value: ":", description: "\":\"" },
        peg$c9 = function(c) {return c},
        peg$c10 = function(c, e) { return {color: c, text: e.join('')}},
        peg$c11 = { type: "any", description: "any character" },
        peg$c12 = function(a) {return a},
        peg$c13 = "{",
        peg$c14 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c15 = function(out) {return out},
        peg$c16 = "}",
        peg$c17 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c18 = "\\",
        peg$c19 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c20 = /^[a-zA-Z.]/,
        peg$c21 = { type: "class", value: "[a-zA-Z.]", description: "[a-zA-Z.]" },
        peg$c22 = function(c) { return c.join('') },
        peg$c23 = null,
        peg$c24 = function(r, e) {return {reset: true, text: e ? e.join('') : '' }},
        peg$c25 = function(after) {return after},
        peg$c26 = "\n",
        peg$c27 = { type: "literal", value: "\n", description: "\"\\n\"" },
        peg$c28 = "\r\n",
        peg$c29 = { type: "literal", value: "\r\n", description: "\"\\r\\n\"" },
        peg$c30 = "\r",
        peg$c31 = { type: "literal", value: "\r", description: "\"\\r\"" },
        peg$c32 = "\u2028",
        peg$c33 = { type: "literal", value: "\u2028", description: "\"\\u2028\"" },
        peg$c34 = "\u2029",
        peg$c35 = { type: "literal", value: "\u2029", description: "\"\\u2029\"" },
        peg$c36 = /^[\t\x0B\f \xA0\uFEFF]/,
        peg$c37 = { type: "class", value: "[\\t\\x0B\\f \\xA0\\uFEFF]", description: "[\\t\\x0B\\f \\xA0\\uFEFF]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      